using BlazorSignalR.Server.Data;
using BlazorSignalR.Shared;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Firebase.Database;
using Firebase.Database.Query;

namespace BlazorSignalR.Server.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class BooksController : ControllerBase
    {
        private readonly string sURL = "https://fireapp-5b98f.firebaseio.com/";
        private readonly string sSecret = "tBwFbHgvRH17fKPMqvQI2AG2QwTU5sH0k3QHrlpS";
        private readonly string sTable = "Books";

        // GET: api/Books
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Book>>> GetBook()
        {
            var auth = sSecret;
            var firebaseClient = new FirebaseClient(
              sURL,
              new FirebaseOptions
              {
                  AuthTokenAsyncFactory = () => Task.FromResult(auth)
              });
            var Data = await firebaseClient.Child(sTable).OnceAsync<Book>();
            List<Book> iList = new List<Book>();
            foreach (var item in Data)
            {
                Book book = item.Object;
                iList.Add(book);
            }
            return iList;
        }

        // GET: api/Books/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Book>> GetBook(string id)
        {
            var auth = sSecret;
            var firebaseClient = new FirebaseClient(
              sURL,
              new FirebaseOptions
              {
                  AuthTokenAsyncFactory = () => Task.FromResult(auth)
              });
            var Data = await firebaseClient.Child(sTable).OnceAsync<Book>();
            List<Book> iList = new List<Book>();
            foreach (var item in Data)
            {
                Book book = item.Object;
                iList.Add(book);
            }

            if (iList == null)
            {
                return NotFound();
            }

            return iList.FirstOrDefault(x=> x.Id==id);
        }

        // PUT: api/Books/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPut("{id}")]
        public async Task<IActionResult> PutBook(string id, Book book)
        {
            if (id != book.Id)
            {
                return BadRequest();
            }


            try
            {
                var auth = sSecret;
                var firebaseClient = new FirebaseClient(
                  sURL,
                  new FirebaseOptions
                  {
                      AuthTokenAsyncFactory = () => Task.FromResult(auth)
                  });
                await firebaseClient.Child(sTable).Child(id).PutAsync(book);
            }
            catch (DbUpdateConcurrencyException)
            {
               
            }

            return NoContent();
        }

        // POST: api/Books
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPost]
        public async Task<ActionResult> PostBook(Book book)
        {
            try
            {
                var auth = sSecret;
                var firebaseClient = new FirebaseClient(
                  sURL,
                  new FirebaseOptions
                  {
                      AuthTokenAsyncFactory = () => Task.FromResult(auth)
                  });
                var dino = await firebaseClient.Child(sTable).PostAsync(book);
                book.Id = dino.Key;
                await firebaseClient.Child(sTable).Child(book.Id).PutAsync(book);
            }
            catch (DbUpdateException)
            {
                throw;
            }

            return Ok();
        }

        // DELETE: api/Books/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<Book>> DeleteBook(string id)
        {
            var auth = sSecret;
            var firebaseClient = new FirebaseClient(
              sURL,
              new FirebaseOptions
              {
                  AuthTokenAsyncFactory = () => Task.FromResult(auth)
              });
            await firebaseClient.Child(sTable).Child(id).DeleteAsync();
            return null;
        }

    }
}
